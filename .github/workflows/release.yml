name: Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
    branches:
      - main


jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up CMake
      uses: lukka/get-cmake@v4.0.0-rc3

    - name: Configure CMake (Linux and macOS)
      if: runner.os != 'Windows'
      run: mkdir build; cd build; cmake -G Ninja -S ../src

    - name: Configure Visual Studio
      if: runner.os == 'Windows'
      uses: egor-tensin/vs-shell@v2
      
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir build
        cd build
        cmake -G "Ninja" -S ../src

    - name: Build
      run: cd build; ninja

    - name: Archive CMake binaries
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: tcpudp-${{ matrix.os }}
        path: build/bin/**/*
        retention-days: 1
  publish:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'nightly'
        run: |
          (echo 'SUBJECT=tcpudp development (prerelease) build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete nightly --yes || true
          git push origin :nightly || true
      - if: env.TAG_NAME != 'nightly'
        run: |
          (echo 'SUBJECT=tcpudp release build';
           echo 'PRERELEASE=') >> $GITHUB_ENV
          gh release delete stable --yes || true
          git push origin :stable || true      # `sha256sum` outputs <sha> <path>, so we cd into each dir to drop the
      # `sha256sum` outputs <sha> <path>, so we cd into each dir to drop the
      # containing folder from the output.
      - run: |
          ls
          for i in tcpudp-*; do
              (
                  tar cvzf $i.tar.gz $i
                  sha256sum $i.tar.gz >> $GITHUB_WORKSPACE/shasum.txt
              )
          done
          cat $GITHUB_WORKSPACE/shasum.txt
      - name: Publish release
        env:
          TCPUDP_VERSION: ${{env.TAG_NAME}}
          DEBUG: api
        run: |
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/notes.md" > "$RUNNER_TEMP/notes.md"
          echo '```' >> "$RUNNER_TEMP/notes.md"
          cat shasum.txt >> "$RUNNER_TEMP/notes.md"
          echo '```' >> "$RUNNER_TEMP/notes.md"
          if [ "$TAG_NAME" != "nightly" ]; then
            gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA tcpudp-macos-latest.tar.gz tcpudp-ubuntu-latest.tar.gz tcpudp-windows-latest.tar.gz shasum.txt
          fi
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA tcpudp-macos-latest.tar.gz tcpudp-ubuntu-latest.tar.gz tcpudp-windows-latest.tar.gz  shasum.txt
